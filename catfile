# config.py
PROMPT_FILE = './prompts/prompt.txt'
# main.py

import argparse
from scripts import create_images, rename_images, analyze_images, transform_data, test_prompt

def main():
    parser = argparse.ArgumentParser(description='Outil de traitement PDF vers CSV.')
    parser.add_argument('--create-images', action='store_true', help='Créer les images à partir des PDFs.')
    parser.add_argument('--rename-images', type=str, help='Renommer les images avec le préfixe spécifié.')
    parser.add_argument('--analyze-images', nargs='*', help='Analyser les images avec l\'IA et créer les JSON.')
    parser.add_argument('--transform-data', action='store_true', help='Concaténer les JSON et les transformer en CSV.')
    parser.add_argument('--test-prompt', type=str, help='Tester le prompt IA avec une image spécifique.')

    args = parser.parse_args()

    if args.create_images:
        create_images.create_images('./data/input_pdfs/', './data/split_pdfs/', './data/images/')
    elif args.rename_images:
        rename_images.rename_images('./data/images/', args.rename_images)
    elif args.analyze_images is not None:
        # args.analyze_images est une liste des arguments fournis
        if len(args.analyze_images) == 0:
            # Pas d'indices fournis, analyser toutes les images
            analyze_images.analyze_images('./data/images/', './data/json/')
        elif len(args.analyze_images) == 2:
            # Deux indices fournis, analyser la plage spécifiée
            start_index = int(args.analyze_images[0])
            end_index = int(args.analyze_images[1])
            analyze_images.analyze_images('./data/images/', './data/json/', start_index, end_index)
        else:
            print("Veuillez fournir soit aucun indice, soit les indices de début et de fin pour --analyze-images.")
    elif args.transform_data:
        transform_data.transform_data('./data/json/', './data/output/combined_data.json', './data/output/output.csv')
    elif args.test_prompt:
        test_prompt.test_prompt(args.test_prompt, './data/json_test/')
    else:
        parser.print_help()

if __name__ == '__main__':
    main()
# analyze_images.py

import os
import json
import re
from .utils.ai_utils import send_image_to_ai

def extract_json_from_response(response):
    """
    Extrait le contenu JSON de la réponse en supprimant les balises de code Markdown si elles sont présentes.
    """
    # Expression régulière pour détecter le code entre ```json et ```
    code_block_pattern = r'```(?:json)?\n([\s\S]*?)\n```'
    match = re.search(code_block_pattern, response, re.MULTILINE)
    if match:
        json_content = match.group(1)
    else:
        # Si aucune balise n'est trouvée, on suppose que la réponse est le contenu JSON
        json_content = response

    return json_content.strip()

def analyze_images(images_folder, json_output_folder, start_index=None, end_index=None):
    if not os.path.exists(json_output_folder):
        os.makedirs(json_output_folder)

    # Obtenir la liste des images
    images = [f for f in os.listdir(images_folder) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    images.sort()  # Assurer un ordre cohérent

    # Si des indices sont fournis, filtrer les images
    if start_index is not None and end_index is not None:
        filtered_images = []
        for image_file in images:
            # Extraire l'indice de l'image à partir du nom du fichier
            match = re.search(r'_(\d+)\.png$', image_file)
            if match:
                index = int(match.group(1))
                if start_index <= index <= end_index:
                    filtered_images.append(image_file)
        images_to_analyze = filtered_images
    else:
        images_to_analyze = images

    for image_file in images_to_analyze:
        image_path = os.path.join(images_folder, image_file)
        response = send_image_to_ai(image_path)
        if response:
            cleaned_response = extract_json_from_response(response)

            # Tenter de parser le JSON pour s'assurer qu'il est valide
            try:
                json_data = json.loads(cleaned_response)
            except json.JSONDecodeError as e:
                print(f"Erreur lors du parsing du JSON pour le fichier {image_file}: {e}")
                print("Contenu de la réponse (non valide) :")
                print(cleaned_response)
                # Enregistrer le contenu non valide pour inspection
                error_file = os.path.join(json_output_folder, f"{os.path.splitext(image_file)[0]}_error.txt")
                with open(error_file, 'w', encoding='utf-8') as f:
                    f.write(response)
                continue  # Passer à l'image suivante

            # Ajouter le champ "Image" à chaque produit
            for item in json_data:
                item['Image'] = image_file  # ou utilisez image_path si vous voulez le chemin complet

            # Enregistrer le JSON modifié dans le fichier de sortie
            output_file = os.path.join(json_output_folder, f"{os.path.splitext(image_file)[0]}.json")
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(json_data, f, ensure_ascii=False, indent=4)
            print(f"Analyse de {image_file} terminée.")
        else:
            print(f"Aucune réponse de l'API pour l'image {image_file}.")

if __name__ == "__main__":
    images_folder = './data/images/'
    json_output_folder = './data/json/'
    analyze_images(images_folder, json_output_folder)
# create_images.py

import os
from .utils.pdf_utils import split_pdf
from .utils.image_utils import pdf_to_images

def create_images(input_pdf_folder, split_pdf_folder, images_folder):
    # Fractionner les PDFs
    for pdf_file in os.listdir(input_pdf_folder):
        if pdf_file.endswith('.pdf'):
            input_pdf_path = os.path.join(input_pdf_folder, pdf_file)
            split_pdf(input_pdf_path, split_pdf_folder)

    # Convertir les PDFs fractionnés en images
    for pdf_file in os.listdir(split_pdf_folder):
        if pdf_file.endswith('.pdf'):
            input_pdf_path = os.path.join(split_pdf_folder, pdf_file)
            pdf_to_images(input_pdf_path, images_folder)

if __name__ == "__main__":
    input_pdf_folder = './data/input_pdfs/'
    split_pdf_folder = './data/split_pdfs/'
    images_folder = './data/images/'
    create_images(input_pdf_folder, split_pdf_folder, images_folder)
# scripts/__init__.py

from . import create_images
from . import rename_images
from . import analyze_images
from . import transform_data
from . import test_prompt
# scripts/rename_images.py

import os

def rename_images(images_folder, prefix):
    if not os.path.exists(images_folder):
        print(f"Le dossier {images_folder} n'existe pas.")
        return

    images = [f for f in os.listdir(images_folder) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    if not images:
        print(f"Aucune image à renommer dans le dossier {images_folder}.")
        return

    images.sort()  # Tri pour assurer un ordre cohérent
    total_images = len(images)
    
    for idx, filename in enumerate(images, start=1):
        old_path = os.path.join(images_folder, filename)
        new_filename = f"{prefix}_{idx:04d}.png"
        new_path = os.path.join(images_folder, new_filename)
        
        # Vérifier si le nouveau nom de fichier existe déjà
        if os.path.exists(new_path):
            print(f"Le fichier {new_filename} existe déjà. Le renommage est interrompu.")
            return

        os.rename(old_path, new_path)
        print(f"Renommé : {filename} -> {new_filename}")
    
    print(f"Total de {total_images} images renommées avec le préfixe '{prefix}'.")

if __name__ == "__main__":
    images_folder = './data/images/'
    prefix = 'prefix'  # Remplacez par le préfixe souhaité
    rename_images(images_folder, prefix)
# scripts/test_prompt.py

import os
from .utils.ai_utils import send_image_to_ai
import json

def test_prompt(image_file, json_output_folder):
    if not os.path.exists(image_file):
        print(f"L'image {image_file} n'existe pas.")
        return

    if not os.path.exists(json_output_folder):
        os.makedirs(json_output_folder)

    response = send_image_to_ai(image_file)
    if response:
        # Enregistrer le JSON dans le dossier json_test
        output_file = os.path.join(json_output_folder, f"{os.path.splitext(os.path.basename(image_file))[0]}.json")
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(response)
        print(f"Le JSON a été enregistré dans {output_file}.")

        # Afficher le JSON sur stdout
        print("Résultat JSON:")
        print(response)
    else:
        print("Aucune réponse de l'IA.")

if __name__ == "__main__":
    image_file = './path/to/your/image.png'
    json_output_folder = './data/json_test/'
    test_prompt(image_file, json_output_folder)
# transform_data.py

import os
from .utils.json_utils import combine_json_files
from .utils.csv_utils import json_to_csv

def transform_data(json_folder, combined_json_path, output_csv_path):
    combine_json_files(json_folder, combined_json_path)
    json_to_csv(combined_json_path, output_csv_path)

if __name__ == "__main__":
    json_folder = './data/json/'
    combined_json_path = './data/output/combined_data.json'
    output_csv_path = './data/output/output.csv'
    transform_data(json_folder, combined_json_path, output_csv_path)
